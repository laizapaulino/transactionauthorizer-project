#version: '3.8'

services:
  ### Serviço PostgreSQL
  postgres:
    image: postgres:latest
    container_name: mypostgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    restart: always
  
  ###     Serviço do App Kotlin
  app:
    build:
      context: ./transactionauthorizer/app
      dockerfile: Dockerfile
    container_name: myapp
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      - redis
      - postgres
      - localstack
    ports:
      - "8080:8080"
    networks:
      - my_network
    restart: always

  
#  #   Serviço do App Kotlin
  app-consumer:
    build:
      context: ./txauthorizerconsumer/app
      dockerfile: Dockerfile
    container_name: app-consumer
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - postgres
      - localstack
    ports:
      - "8081:8081"
    networks:
      - my_network
    restart: always

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379" # Mapeamento de porta local para a porta do container
    networks:
      - my_network

    volumes:
      - redis-data:/data # Persistência de dados
    command: [ "redis-server", "--appendonly", "yes" ] # Configura o Redis para usar persistência AOF (Append-Only File)
    healthcheck: # Verificação de saúde do container
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  init-sqs:
    depends_on:
      - localstack
    image: amazon/aws-cli
    entrypoint: [ "sh", "/scripts/init-sqs.sh" ]
    volumes:
      - ./transactionauthorizer/localstack/init-sqs.sh:/scripts/init-sqs.sh
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=sa-east-1


  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
    image: localstack/localstack
    hostname: localstack
    ports:
      - "4566:4566"

    environment:
      - DEBUG=${DEBUG-}
      - PERSISTENCE=${PERSISTENCE-}
      - LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY-}
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "./localstack:/etc/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./volume:/volume

volumes:
  postgres_data: { }  # Volumes persistentes para o PostgreSQL
  redis-data:

networks:
  my_network:
    driver: bridge

  
  #docker container prune
  #  docker-compose up --build
  
  
